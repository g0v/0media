// Generated by LiveScript 1.2.0
var m, ref$, w, h, main;
m = [20, 20, 20, 20];
ref$ = [$(window).width(), $(window).height()], w = ref$[0], h = ref$[1];
main = function($scope){
  var ref$, x$, svg, y$, z$, z1$;
  ref$ = [$('.content').width(), $('.content').height()], w = ref$[0], h = ref$[1];
  x$ = svg = d3.select('.content').append('svg');
  x$.attr('width', w);
  x$.attr('height', h);
  x$.attr('viewBox', "0 0 " + w + " " + h);
  x$.attr('preserveAspectRatio', "xMidYMid");
  y$ = svg;
  z$ = y$.append('g');
  z$.attr('class', 'rect');
  z1$ = y$.append('g');
  z1$.attr('class', 'text');
  return d3.json('news.json', function(data){
    var treemap, root, color, i$, len$, item, pCat, make, domake;
    treemap = d3.layout.treemap().size([w, h]).sticky(true).value(function(it){
      return it.size;
    });
    root = {
      children: data,
      name: ""
    };
    color = d3.scale.ordinal().domain(['媒體', '藝文', '娛樂', '科技', '生活', '地方', '環境', '經濟', '司法', '政治', '中國', '國際', '要聞']).range(['#a50', '#620', '#5a0', '#0a5', '#059', '#00b', '#40a', '#909', '#747', '#777', '#900', '#333', '#264']);
    for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
      item = data[i$];
      item.name = item.title;
      item.time = new Date(item.date).getTime();
      item.parent = root;
      item.children = null;
      item.depth = 1;
      item.color = color(item.cat);
    }
    data.sort(function(a, b){
      return b.time - a.time;
    });
    pCat = null;
    make = function(cat){
      var data2, res$, i$, i, times, len$, x, ref$, min, max, sizer1, sizer2, item, treemap, nodes, x$, y$, z$, z1$, z2$;
      if (pCat === null) {
        pCat = cat;
      } else {
        pCat = null;
        cat = null;
      }
      if (cat) {
        data2 = data.filter(function(it){
          return it.cat === cat;
        });
      } else {
        data2 = data;
      }
      if (data.length >= 50) {
        res$ = [];
        for (i$ = 0; i$ < 50; ++i$) {
          i = i$;
          res$.push(data2[i]);
        }
        data2 = res$;
      }
      data2 = data2.filter(function(it){
        return it && (!cat || it.cat === cat);
      });
      console.log(data2.length, data.length);
      res$ = [];
      for (i$ = 0, len$ = data2.length; i$ < len$; ++i$) {
        x = data2[i$];
        res$.push(x.time);
      }
      times = res$;
      ref$ = [d3.min(times), d3.max(times)], min = ref$[0], max = ref$[1];
      sizer1 = d3.scale.linear().domain([min, max]).range([10, 1000]);
      sizer2 = d3.scale.linear().domain([min, max]).range([0.8, 2.5]);
      for (i$ = 0, len$ = data2.length; i$ < len$; ++i$) {
        item = data2[i$];
        item.size = parseInt(sizer1(item.time));
        item.font = parseInt(sizer2(item.time));
      }
      treemap = d3.layout.treemap().size([w, h]).sticky(true).value(function(it){
        return it.size;
      });
      console.log(data2.length);
      nodes = treemap.nodes({
        children: data2
      });
      console.log(nodes.length);
      /*
      svg.select \g.rect .selectAll \rect.node .data nodes
        ..exit!remove!
        ..enter!append \rect
          ..attr \class \node
      
      svg.select \g.text .selectAll \text.node .data nodes
        ..exit!remove!
        ..enter!append \text
          ..attr \class \node
      
      svg.select \g.rect .selectAll \rect.node
        ..on \click -> domake it
        ..style \font-size -> "#{it.font}em"
        ..transition!duration 500
          ..attr \x -> "#{it.x}px"
          ..attr \y -> "#{it.y}px"
          ..attr \width -> "#{it.dx}px"
          ..attr \height -> "#{it.dy}px"
          ..attr \fill -> it.color
      d3.select \g.text .selectAll \text.node
        ..attr \x -> "#{it.x}px"
        ..attr \y -> "#{it.y}px"
        ..text -> it.name
        #..style \width -> "#{it.dx}px"
        #..style \height -> "#{it.dy}px"
      */
      x$ = d3.select('.content').selectAll('div.node').data(nodes);
      x$.exit().remove();
      y$ = x$.enter().append('div');
      y$.attr('class', 'node');
      y$.append('div').attr('class', 'ib');
      z$ = d3.select('.content').selectAll('div.node');
      z$.on('click', function(it){
        return domake(it);
      });
      z$.style('font-size', function(it){
        return it.font + "em";
      });
      z1$ = z$.select('div.ib');
      z1$.style('width', function(it){
        return it.dx + "px";
      });
      z1$.style('height', function(it){
        return it.dy + "px";
      });
      z1$.text(function(it){
        return it.name;
      });
      z2$ = z$.transition().duration(500);
      z2$.style('left', function(it){
        return it.x + "px";
      });
      z2$.style('top', function(it){
        return it.y + "px";
      });
      z2$.style('width', function(it){
        return it.dx + "px";
      });
      z2$.style('height', function(it){
        return it.dy + "px";
      });
      z2$.style('background', function(it){
        return it.color;
      });
      return z$;
    };
    domake = function(it){
      console.log(it.cat);
      return make(it.cat);
    };
    return make();
  });
};